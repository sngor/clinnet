AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Clinnet-EMR
  SAM Template for Clinnet-EMR backend services

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name (dev, test, prod)

Globals:
  Function:
    Timeout: 30
    Runtime: python3.12
    MemorySize: 128
    Environment:
      Variables:
        PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
        USERS_TABLE: !Ref UsersTable
        SERVICES_TABLE: !Ref ServicesTable
        APPOINTMENTS_TABLE: !Ref AppointmentsTable
        DOCUMENTS_BUCKET: !Ref DocumentsBucket
        ENVIRONMENT: !Ref Environment
        USER_POOL_ID: !Ref UserPool
    Architectures:
      - x86_64
  Api:
    Cors:
      AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'''
      AllowOrigin: '''*''' # Allow all origins, Lambda functions will handle specific CORS logic
      AllowCredentials: false
      MaxAge: '''7200''' # Added for consistency with Lambda OPTIONS handlers

Resources:
  # DynamoDB Table for Patients and Medical Records (hybrid single-table design)
  PatientRecordsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub clinnet-patient-records-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: type-index
          KeySchema:
            - AttributeName: type
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  MedicalReportsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain # Retaining the table on stack deletion
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub clinnet-medical-reports-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: patientId
          AttributeType: S
        - AttributeName: doctorId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PatientIdIndex
          KeySchema:
            - AttributeName: patientId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: DoctorIdIndex
          KeySchema:
            - AttributeName: doctorId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  UsersTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub clinnet-users-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ServicesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub clinnet-services-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  AppointmentsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub clinnet-appointments-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: patientId # Added for GSI
          AttributeType: S
        - AttributeName: doctorId # Added for GSI
          AttributeType: S
        - AttributeName: appointmentDate # Ensure this is defined for the GSI sort key
          AttributeType: S
        - AttributeName: entityType # New attribute for GSI partition key
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AppointmentDateIndex
          KeySchema:
            - AttributeName: entityType
              KeyType: HASH
            - AttributeName: appointmentDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: PatientIdIndex
          KeySchema:
            - AttributeName: patientId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: DoctorIdIndex
          KeySchema:
            - AttributeName: doctorId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # S3 Bucket for document storage
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        # Ensure public access is blocked
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: ExpireTemporaryFiles
            Status: Enabled
            ExpirationInDays: 30 # Automatically delete objects after 30 days

  MedicalReportImagesBucket:
    # New S3 bucket for medical report images
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub clinnet-emr-report-images-${AWS::AccountId}-${AWS::Region}-${Environment} # Unique bucket name
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        # Basic CORS for potential direct browser uploads in future, adjust as needed
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - PUT
              - GET
              - DELETE
            AllowedOrigins:
              # Restrict this if frontend origin is fixed
              - '*'
            MaxAge: 3000
      LifecycleConfiguration:
        # Optional: Add lifecycle rules if needed, e.g., for non-current versions
        Rules:
          - Id: ExpireOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90

  # API Gateway
  ClinicAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      # Improve CORS configuration
      BinaryMediaTypes:
        - application/json
        - multipart/form-data
      Cors:
        AllowMethods: '''GET, POST, PUT, DELETE, OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'''
        AllowOrigin: '''*''' # Allow all origins, Lambda functions will handle specific CORS logic
        MaxAge: '''7200'''
        AllowCredentials: false
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'''
              Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              Access-Control-Max-Age: '''7200'''
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'''
              Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              Access-Control-Max-Age: '''7200'''
        UNAUTHORIZED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'''
              Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              Access-Control-Max-Age: '''7200'''
        ACCESS_DENIED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'''
              Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              Access-Control-Max-Age: '''7200'''
        RESOURCE_NOT_FOUND:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'''
              Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              Access-Control-Max-Age: '''7200'''

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub clinnet-user-pool-${Environment}
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: role # Using custom attribute for role
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: profile_image # Custom attribute for profile image
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub clinnet-app-client-${Environment}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  # Lambda Functions for Services
  GetServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: get_services.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        GetServices:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services
            Method: get
            Auth:
              Authorizer: NONE # Services endpoint is public

  GetServiceByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: get_service_by_id.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        GetServiceById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services/{id}
            Method: get
            Auth:
              Authorizer: NONE # Getting a specific service is public

  CreateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: create_service.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        CreateService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services
            Method: post
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  UpdateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: update_service.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        UpdateService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services/{id}
            Method: put
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  DeleteServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: delete_service.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        DeleteService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /services/{id}
            Method: delete
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

            # Lambda Functions for Patients
  GetPatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.get_patients.lambda_handler # Adjusted handler path
      Environment:
        Variables:
          PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PatientRecordsTable
      Layers:
        - !Ref UtilsLayer
      Events:
        GetPatients:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # CHANGED: Protect patient list

  GetPatientByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.get_patient_by_id.lambda_handler # Adjusted handler path
      Environment:
        Variables:
          PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PatientRecordsTable
      Events:
        GetPatientById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # CHANGED: Protect specific patient

  CreatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.create_patient.lambda_handler # Adjusted handler path
      Environment:
        Variables:
          PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientRecordsTable
      Layers:
        - !Ref UtilsLayer
      Events:
        CreatePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients
            Method: post
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  UpdatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.update_patient.lambda_handler # Adjusted handler path
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientRecordsTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub arn:aws:s3:::${DocumentsBucket}/patients/* # Corrected path
      Events:
        UpdatePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients/{id}
            Method: put
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  DeletePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ # Changed from src/handlers/patients/
      Handler: handlers.patients.delete_patient.lambda_handler # Adjusted handler path
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientRecordsTable
      Events:
        DeletePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /patients/{id}
            Method: delete
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

            # Lambda Functions for User Management
  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: list_users.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt UserPool.Arn
      Layers:
        - !Ref UtilsLayer
      Events:
        ListUsers:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: create_cognito_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: update_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminEnableUser
                - cognito-idp:AdminDisableUser
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/{userId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: delete_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminDeleteUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/{userId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  EnableUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: enable_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminEnableUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        EnableUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/{userId}/enable
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  DisableUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: disable_user.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminDisableUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        DisableUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/{userId}/disable
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # Lambda Functions for Profile Image Management
  UploadProfileImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: upload_profile_image.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:HeadObject
              Resource: !Sub arn:aws:s3:::${DocumentsBucket}/profile-images/*
      Layers:
        - !Ref UtilsLayer
      Events:
        UploadProfileImage:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/profile-image
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  GetProfileImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: get_profile_image.lambda_handler
      Environment:
        # Add Environment Variables
        Variables:
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
          USER_POOL_ID: !Ref UserPool
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:HeadObject
              Resource: !Sub arn:aws:s3:::${DocumentsBucket}/profile-images/*
      Layers:
        - !Ref UtilsLayer
      Events:
        GetProfileImage:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/profile-image
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetAggregatedReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAggregatedReports # Explicit name
      Handler: handlers/reports/getAggregatedReports.handler
      Runtime: nodejs22.x
      CodeUri: src/
      Description: Fetches aggregated report data for admin reporting
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref AppointmentsTable
        - DynamoDBReadPolicy:
            TableName: !Ref PatientRecordsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ServicesTable
      Environment:
        Variables:
          PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
          USERS_TABLE: !Ref UsersTable
          SERVICES_TABLE: !Ref ServicesTable
          APPOINTMENTS_TABLE: !Ref AppointmentsTable
          APPOINTMENTS_TABLE_NAME: !Ref AppointmentsTable
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: !Ref UserPool
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  RemoveProfileImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: remove_profile_image.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - s3:DeleteObject
                - s3:GetObject
                - s3:HeadObject
              Resource: !Sub ${DocumentsBucket.Arn}/profile-images/*
      Layers:
        - !Ref UtilsLayer
      Events:
        RemoveProfileImage:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/profile-image
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # Explicit OPTIONS method for /users/profile-image to ensure CORS preflight is not blocked by Cognito
  GetProfileImageOptions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/cors/
      Handler: cors_options.lambda_handler
      Events:
        GetProfileImageOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /users/profile-image
            Method: options
            Auth:
              Authorizer: NONE

  # Lambda Functions for Diagnostics
  CheckS3ConnectivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/diagnostics/
      Handler: check_s3.lambda_handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:ListAllMyBuckets
              Resource: '*'
      Layers:
        - !Ref UtilsLayer
      Events:
        CheckS3:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /diagnostics/s3
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CheckDynamoDBCrudFunction:
    # New DynamoDB CRUD Function
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/diagnostics/
      Handler: check_dynamodb_crud.lambda_handler
      Layers:
        - !Ref UtilsLayer

      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PatientRecordsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        CheckDynamoCrud:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /diagnostics/crud/{serviceName}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CheckCognitoUserCrudFunction:
    # New Cognito User CRUD Function
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/diagnostics/
      Handler: check_cognito_user_crud.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminDeleteUser
              Resource: !GetAtt UserPool.Arn
      # USER_POOL_ID is inherited from Globals
      Events:
        CheckCognitoCrud:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /diagnostics/cognito-users
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # Lambda Functions for Appointments
  GetAppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: get_appointments.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        GetAppointments:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # CHANGED: Protect appointment list

  GetAppointmentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: get_appointment_by_id.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        GetAppointmentById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # CHANGED: Protect specific appointment

  CreateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: create_appointment.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        CreateAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments
            Method: post
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  UpdateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: update_appointment.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        UpdateAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments/{id}
            Method: put
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  DeleteAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: delete_appointment.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppointmentsTable
      Events:
        DeleteAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /appointments/{id}
            Method: delete
            # Auth uses DefaultAuthorizer (CognitoAuthorizer)

  MedicalReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/medical_reports/index.handler # Entry point adjusted for shared CodeUri
      Runtime: nodejs22.x
      Environment:
        # Add specific environment variables here
        Variables:
          MEDICAL_REPORTS_TABLE_NAME: !Ref MedicalReportsTable # Already available via Globals, but being explicit
          MEDICAL_REPORTS_IMAGE_BUCKET_NAME: !Ref MedicalReportImagesBucket # New S3 bucket
          # Inherit other global vars if not redefining Environment here completely
          PATIENT_RECORDS_TABLE: !Ref PatientRecordsTable
          USERS_TABLE: !Ref UsersTable
          SERVICES_TABLE: !Ref ServicesTable
          APPOINTMENTS_TABLE: !Ref AppointmentsTable
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: !Ref UserPool
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MedicalReportsTable
        - Statement:
            # IAM policy for S3 access
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource:
                - !GetAtt MedicalReportImagesBucket.Arn # Bucket level permissions if needed for ListBucket etc.
                - !Sub ${MedicalReportImagesBucket.Arn}/* # Object level permissions
      Events:
        CreateReport:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetReportById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetReportsByPatientId:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/patient/{patientId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetReportsByDoctorId:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/doctor/{doctorId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateReport:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteReport:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        UploadReportImage:
          # New endpoint for uploading images to a report
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/{id}/images
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer # Assuming image uploads should be authenticated
        # OPTIONS for CORS preflight
        OptionsReportsBase:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports
            Method: options
            Auth:
              Authorizer: NONE # OPTIONS should not be auth-protected
        OptionsReportsById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/{id}
            Method: options
            Auth:
              Authorizer: NONE
        OptionsReportsByPatientId:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/patient/{patientId}
            Method: options
            Auth:
              Authorizer: NONE
        OptionsReportsByDoctorId:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/doctor/{doctorId}
            Method: options
            Auth:
              Authorizer: NONE
        OptionsReportImageUpload:
          # OPTIONS for the new image upload endpoint
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /reports/{id}/images # Matches the new POST endpoint
            Method: options
            Auth:
              Authorizer: NONE # OPTIONS should not be auth-protected

  SummarizeDoctorNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/ai/
      Handler: summarize_note.lambda_handler
      # Runtime: python3.12 # Inherited from Globals
      Layers:
        - !Ref UtilsLayer
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*' # Consider restricting this to specific model ARNs in production
      # Environment: # Inherits from Globals
      Events:
        SummarizeNoteApi:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /ai/summarize-note
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # --- Frontend (S3 + CloudFront) ---
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub clinnet-frontend-${Environment}-${AWS::AccountId}-${AWS::Region}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub ${FrontendBucket.Arn}/*

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub OAI for Clinnet-EMR frontend ${Environment}

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            # Use the regional S3 domain to avoid cross-region redirects that can cause AccessDenied
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          # Add cache control settings
          MinTTL: 0
          DefaultTTL: 86400 # 1 day for most assets
          MaxTTL: 31536000 # 1 year max
        # Add a specific cache behavior for index.html
        CacheBehaviors:
          - PathPattern: /index.html
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            MinTTL: 0
            DefaultTTL: 0 # Don't cache index.html
            MaxTTL: 0 # Always fetch the latest version
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 403 # Add 403 error handling
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404 # Keep existing 404 handling
            ResponseCode: 200
            ResponsePagePath: /index.html

  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: utils-layer
      Description: Shared utils for Clinnet-EMR Lambdas
      ContentUri: lambda_layer/
      CompatibleRuntimes:
        - python3.12

Outputs:
  ClinicAPI:
    Description: API Gateway endpoint URL for the current environment
    Value: !Sub https://${ClinicAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiEndpoint

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolClientId

  DocumentsBucket:
    Description: S3 bucket for document storage
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub ${AWS::StackName}-DocumentsBucket

  MedicalReportImagesBucketName:
    Description: S3 bucket for medical report images
    Value: !Ref MedicalReportImagesBucket
    Export:
      Name: !Sub ${AWS::StackName}-MedicalReportImagesBucket

  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub ${AWS::StackName}-Region

  FrontendBucketName:
    Description: S3 bucket for static frontend hosting
    Value: !Ref FrontendBucket

  CloudFrontDistributionDomain:
    Description: CloudFront distribution domain name
    Value: !GetAtt FrontendDistribution.DomainName