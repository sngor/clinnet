AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  Clinnet-EMR Complete Tech Stack
  SAM Template for the complete Clinnet-EMR healthcare management system
  Includes: Lambda Functions, API Gateway, Cognito, Aurora Serverless v2, DynamoDB, S3, VPC, Security Groups

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name (dev, test, prod)

  DBUsername:
    Type: String
    Default: admin
    Description: Database administrator username
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters

  DBPassword:
    Type: String
    NoEcho: true
    Description: Database administrator password
    MinLength: 8
    MaxLength: 41
    Default: "ClinetEMR2024!"

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]

Globals:
  Function:
    Timeout: 30
    Runtime: python3.12
    MemorySize: 256
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    Environment:
      Variables:
        # RDS Configuration
        DB_HOST: !GetAtt AuroraCluster.Endpoint.Address
        DB_PORT: !GetAtt AuroraCluster.Endpoint.Port
        DB_NAME: clinnet_emr
        DB_USERNAME: !Ref DBUsername
        DB_PASSWORD: !Ref DBPassword
        # DynamoDB Tables
        MEDICAL_REPORTS_TABLE: !Ref MedicalReportsTable
        SERVICES_TABLE: !Ref ServicesTable
        USERS_TABLE: !Ref UsersTable
        # S3 Buckets
        DOCUMENTS_BUCKET: !Ref DocumentsBucket
        MEDICAL_REPORT_IMAGES_BUCKET: !Ref MedicalReportImagesBucket
        # General Configuration
        ENVIRONMENT: !Ref Environment
        USER_POOL_ID: !Ref UserPool
    Architectures:
      - x86_64
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'"
      AllowOrigin: "'*'"
      AllowCredentials: false
      MaxAge: "'7200'"

Resources:
  # VPC Infrastructure for RDS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-vpc-${Environment}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-igw-${Environment}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-public-subnet-${Environment}

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-private-subnet-1-${Environment}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-private-subnet-2-${Environment}

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-public-rt-${Environment}

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-private-rt-${Environment}

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS outbound
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP outbound
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-lambda-sg-${Environment}

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Aurora Serverless v2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: Allow Lambda access to MySQL
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-db-sg-${Environment}

  # Add egress rule to Lambda SG after DatabaseSecurityGroup is created
  LambdaToDBEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
      Description: Allow access to Aurora

  # Aurora Serverless v2
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora Serverless v2
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub clinnet-emr-db-subnet-group-${Environment}

  AuroraCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      DBClusterIdentifier: !Sub clinnet-emr-${Environment}
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.07.1
      EngineMode: provisioned
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 16
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DatabaseName: clinnet_emr
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      StorageEncrypted: true
      EnableCloudwatchLogsExports:
        - error
        - general
        - slowquery
      DeletionProtection: !If [IsProduction, true, false]

  AuroraInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub clinnet-emr-instance-${Environment}
      DBClusterIdentifier: !Ref AuroraCluster
      DBInstanceClass: db.serverless
      Engine: aurora-mysql
      PubliclyAccessible: false

  # Keep DynamoDB for Medical Reports (document storage)
  MedicalReportsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub clinnet-medical-reports-v2-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: patientId
          AttributeType: S
        - AttributeName: doctorId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PatientIdIndex
          KeySchema:
            - AttributeName: patientId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: DoctorIdIndex
          KeySchema:
            - AttributeName: doctorId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # S3 Buckets
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub clinnet-documents-v2-${AWS::AccountId}-${AWS::Region}-${Environment}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: ExpireTemporaryFiles
            Status: Enabled
            ExpirationInDays: 30

  MedicalReportImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub clinnet-emr-report-images-v2-${AWS::AccountId}-${AWS::Region}-${Environment}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - GET
              - DELETE
            AllowedOrigins:
              - "*"
            MaxAge: 3000

  # Frontend S3 Bucket for Static Website Hosting
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub clinnet-emr-frontend-${AWS::AccountId}-${AWS::Region}-${Environment}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - "*"
            MaxAge: 3000

  # S3 Bucket Policy for CloudFront Access
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${FrontendBucket}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # CloudFront Origin Access Control
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub clinnet-emr-oac-${Environment}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub Clinnet EMR Frontend Distribution - ${Environment}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # Managed-SecurityHeadersPolicy
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        PriceClass: PriceClass_100 # Use only North America and Europe edge locations for cost optimization

  # API Gateway
  ClinicAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      BinaryMediaTypes:
        - application/json
        - multipart/form-data
      Cors:
        AllowMethods: "'GET, POST, PUT, DELETE, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Origin,Accept'"
        AllowOrigin: "'*'"
        MaxAge: "'7200'"
        AllowCredentials: false

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub clinnet-user-pool-v2-${Environment}
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: role
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: profile_image
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub clinnet-app-client-v2-${Environment}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  # Lambda Layer
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: utils-layer
      Description: Shared utils for Clinnet-EMR Lambdas including RDS support
      ContentUri: lambda_layer/
      CompatibleRuntimes:
        - python3.12

  # Lambda Functions for Patients (RDS-based)
  GetPatientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/patients/
      Handler: get_patients.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        GetPatients:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/patients
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetPatientByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/patients/
      Handler: get_patient_by_id.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        GetPatientById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/patients/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CreatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/patients/
      Handler: create_patient.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        CreatePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/patients
            Method: post

  UpdatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/patients/
      Handler: update_patient.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        UpdatePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/patients/{id}
            Method: put

  DeletePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/patients/
      Handler: delete_patient.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        DeletePatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/patients/{id}
            Method: delete

  # Lambda Functions for Appointments (RDS-based)
  GetAppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: get_appointments.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        GetAppointments:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/appointments
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetAppointmentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: get_appointment_by_id.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        GetAppointmentById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/appointments/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CreateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: create_appointment.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        CreateAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/appointments
            Method: post

  UpdateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: update_appointment.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        UpdateAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/appointments/{id}
            Method: put

  DeleteAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/appointments/
      Handler: delete_appointment.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        DeleteAppointment:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/appointments/{id}
            Method: delete

  # Lambda Functions for Services (DynamoDB-based)
  ServicesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub clinnet-services-v2-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  GetServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: get_services.lambda_handler
      Environment:
        Variables:
          SERVICES_TABLE: !Ref ServicesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        GetServices:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/services
            Method: get
            Auth:
              Authorizer: NONE

  GetServiceByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: get_service_by_id.lambda_handler
      Environment:
        Variables:
          SERVICES_TABLE: !Ref ServicesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        GetServiceById:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/services/{id}
            Method: get
            Auth:
              Authorizer: NONE

  CreateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: create_service.lambda_handler
      Environment:
        Variables:
          SERVICES_TABLE: !Ref ServicesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        CreateService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/services
            Method: post

  UpdateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: update_service.lambda_handler
      Environment:
        Variables:
          SERVICES_TABLE: !Ref ServicesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        UpdateService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/services/{id}
            Method: put

  DeleteServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/services/
      Handler: delete_service.lambda_handler
      Environment:
        Variables:
          SERVICES_TABLE: !Ref ServicesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Layers:
        - !Ref UtilsLayer
      Events:
        DeleteService:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/services/{id}
            Method: delete

  # Lambda Functions for Users (Cognito-based)
  UsersTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub clinnet-users-v2-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: list_users.lambda_handler
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt UserPool.Arn
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Layers:
        - !Ref UtilsLayer
      Events:
        ListUsers:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/users
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: create_cognito_user.lambda_handler
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Layers:
        - !Ref UtilsLayer
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/users
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # Medical Reports Functions (DynamoDB-based)
  MedicalReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub MedicalReports-${Environment}
      Handler: handlers/medical_reports/index.handler
      Runtime: nodejs20.x
      CodeUri: src/
      Description: Medical reports CRUD operations
      Environment:
        Variables:
          MEDICAL_REPORTS_TABLE: !Ref MedicalReportsTable
          MEDICAL_REPORT_IMAGES_BUCKET: !Ref MedicalReportImagesBucket
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: !Ref UserPool
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref MedicalReportsTable
        - S3CrudPolicy:
            BucketName: !Ref MedicalReportImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
      Events:
        CreateReport:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/medical-reports
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetReport:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/medical-reports/{id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetReportsByPatient:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/medical-reports/patient/{patientId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetReportsByDoctor:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/medical-reports/doctor/{doctorId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateReport:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/medical-reports/{id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteReport:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/medical-reports/{id}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  # AI Summarization Function
  SummarizeNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/ai/
      Handler: summarize_note.lambda_handler
      Environment:
        Variables:
          MEDICAL_REPORTS_TABLE: !Ref MedicalReportsTable
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: "*"
        - DynamoDBReadPolicy:
            TableName: !Ref MedicalReportsTable
      Layers:
        - !Ref UtilsLayer
      Events:
        SummarizeNoteApi:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/ai/summarize-note
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # Diagnostic Functions for System Health
  CheckS3ConnectivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/diagnostics/
      Handler: check_s3.lambda_handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:ListAllMyBuckets
              Resource: "*"
      Layers:
        - !Ref UtilsLayer
      Events:
        CheckS3:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/diagnostics/s3
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CheckDatabaseConnectivityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/diagnostics/
      Handler: check_database.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Events:
        CheckDatabase:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/diagnostics/database
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # Aggregated Reports Function
  GetAggregatedReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub GetAggregatedReports-${Environment}
      Handler: handlers/reports/getAggregatedReports.handler
      Runtime: nodejs20.x
      CodeUri: src/
      Description: Fetches aggregated report data for admin reporting
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref MedicalReportsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ServicesTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          MEDICAL_REPORTS_TABLE: !Ref MedicalReportsTable
          SERVICES_TABLE: !Ref ServicesTable
          USERS_TABLE: !Ref UsersTable
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: !Ref UserPool
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ClinicAPI
            Path: /api/reports/aggregated
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  ClinicAPI:
    Description: API Gateway endpoint URL for the current environment
    Value: !Sub https://${ClinicAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiEndpoint

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolClientId

  DatabaseEndpoint:
    Description: Aurora Serverless v2 endpoint
    Value: !GetAtt AuroraCluster.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseEndpoint

  DatabasePort:
    Description: Aurora Serverless v2 port
    Value: !GetAtt AuroraCluster.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DatabasePort

  DocumentsBucket:
    Description: S3 bucket for documents
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub ${AWS::StackName}-DocumentsBucket

  MedicalReportImagesBucket:
    Description: S3 bucket for medical report images
    Value: !Ref MedicalReportImagesBucket
    Export:
      Name: !Sub ${AWS::StackName}-MedicalReportImagesBucket

  MedicalReportsTable:
    Description: DynamoDB table for medical reports
    Value: !Ref MedicalReportsTable
    Export:
      Name: !Sub ${AWS::StackName}-MedicalReportsTable

  ServicesTable:
    Description: DynamoDB table for services
    Value: !Ref ServicesTable
    Export:
      Name: !Sub ${AWS::StackName}-ServicesTable

  UsersTable:
    Description: DynamoDB table for users
    Value: !Ref UsersTable
    Export:
      Name: !Sub ${AWS::StackName}-UsersTable

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCId

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2Id

  FrontendBucket:
    Description: S3 bucket for frontend static website hosting
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub ${AWS::StackName}-FrontendBucket

  FrontendBucketWebsiteURL:
    Description: S3 bucket website URL
    Value: !GetAtt FrontendBucket.WebsiteURL
    Export:
      Name: !Sub ${AWS::StackName}-FrontendBucketWebsiteURL

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontDistributionId

  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontDistributionDomainName

  FrontendURL:
    Description: Frontend application URL via CloudFront
    Value: !Sub https://${CloudFrontDistribution.DomainName}
    Export:
      Name: !Sub ${AWS::StackName}-FrontendURL
